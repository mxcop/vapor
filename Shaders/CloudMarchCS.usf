#include "Common.ush"

// Ray Marching Parameters
static const uint MAX_DIRECT_STEPS = 256;
static const uint MAX_INDIRECT_STEPS = 256;

// Volume Parameters
static const float SPHERE_SIZE = 100.0; // cm

// Cloud Parameters
ConstantBuffer<CloudParameters> Cloud;

static const float NOISE_FREQ = 0.01;
Texture3D<float> AlligatorNoise;
Texture3D<float4> PathDensityTexture;

// Scene Textures
Texture2D<float3> SceneColor;
Texture2D<float> SceneDepth;

// Output Texture
RWTexture2D<float4> Output;

/// Calculate the threshold path density at which the absorption reaches a given threshold.
float CalcPathDensityThreshold(const float AbsorptionThreshold) {
    return -log(AbsorptionThreshold) / min(min(Cloud.Absorption.r, Cloud.Absorption.g), Cloud.Absorption.b);
}

/// Calculate a distance-based step size for ray-marching.
float CalcStepSize(const float Distance) {
    // Step size constants.
    static const float MIN_STEP_SIZE = 3.0;
    static const float STEP_DISTANCE = 250.0;

    // Distance-based step size.
    return MIN_STEP_SIZE + Distance * (1.0 / STEP_DISTANCE);
}

CloudSample SampleVolume(const float3 Point) {
    const float3 UVW = (Point - Cloud.Position) / CLOUD_BOUNDS * 0.5 + 0.5;
    return SampleCloud(Cloud, UVW.xzy);
}

// Anisotropic scattering function for clouds.
// Source: <https://www.guerrilla-games.com/read/nubis-cubed>
float HenyeyGreenstein(float VdotL, float G) {
    const float G2 = G * G;
    const float num = 1.0 - G2;
    const float denom = 1.0 + G2 - 2.0 * G * VdotL;
    const float rsqrt_denom = rsqrt(denom);
    return num * rsqrt_denom * rsqrt_denom * rsqrt_denom * 0.07957747154594766788444188168626;
}

/// Trace the scene, find out how much light is being absorped.
float3 TraceAbsorption(const float3 Origin, const float3 Dir, const float PathDensityThreshold) {
    //// Intersect the bounds of the volume, return early if we miss.
    //const float2 BoundsIntersection = RayAABB(Origin, Dir, Cloud.Position - CLOUD_BOUNDS, Cloud.Position + CLOUD_BOUNDS);
    
    //// Traversal variables.
    //float Distance = max(0.0, BoundsIntersection.x);
    //float PathDensity = 0.0;
    //float StepSize = Cloud.InnerStepSize;
    
    //for (uint s = 0; s < MAX_INDIRECT_STEPS; ++s) {
    //    if (Distance >= BoundsIntersection.y) break;
        
    //    // Sample the volume.
    //    const float3 SamplePos = Origin + Dir * Distance;
    //    const CloudSample Sample = SampleVolume(SamplePos);
        
    //    // No work to be done outside the volume, just keep stepping.
    //    if (Sample.IsOutside()) {
    //        Distance += max(Cloud.MinStepSize, Sample.SDist()); // Move along the ray to the next location.
    //        continue;
    //    }
    //    Distance += StepSize;
        
    //    // We're inside the volume, accumulate density.
    //    PathDensity += Sample.Density() * StepSize;
    //    if (PathDensity > PathDensityThreshold) break;
    //}
    
    // Sample path density from baked spherical harmonics.
    const float3 UVW = (Origin - Cloud.Position) / CLOUD_BOUNDS * 0.5 + 0.5;
    const float4 SH1 = PathDensityTexture.Sample(GlobalBilinearClampedSampler, UVW);
    const float PathDensity = Cloud.Density * (SH1.x + dot(SH1.yzw, Dir) * 3.0);
    
    // Beer's Law <https://en.wikipedia.org/wiki/Beer%E2%80%93Lambert_law>
    const float3 Absorption = saturate(exp(-Cloud.Absorption * PathDensity));
    return Absorption;
}

float3 TraceVolume(const float3 ViewColor, const float3 Origin, const float3 Dir) {
    // Intersect the bounds of the volume, return early if we miss.
    const float2 BoundsIntersection = RayAABB(Origin, Dir, Cloud.Position - CLOUD_BOUNDS, Cloud.Position + CLOUD_BOUNDS);
    if (BoundsIntersection.x > BoundsIntersection.y) return ViewColor;
    
    // Traversal variables.
    float Absorption = 0.0;
    float3 Luminance = 0.0;
    float PathDensity = 0.0;
    float Distance = max(0.0, BoundsIntersection.x);
    
    // Calculate at what path density we will reach the extinction threshold.
    const float PathDensityThreshold = CalcPathDensityThreshold(Cloud.ExtinctionThreshold);
    
    // Sun out-scattering will be identical everywhere along the ray, so we pre-calculate it.
    const float3 Scattering = Cloud.SunLuminance * HenyeyGreenstein(dot(Dir, Cloud.SunDir), 0.2);
    
    // Integrate luminance along the ray.
    for (uint s = 0; s < MAX_DIRECT_STEPS; ++s) {
        if (Distance >= BoundsIntersection.y) break;
        
        // Sample the volume at the current location.
        const float3 SamplePos = Origin + Dir * Distance;
        const CloudSample Sample = SampleVolume(SamplePos);
        
        // No work to be done outside the volume, just keep stepping.
        if (Sample.IsOutside()) {
            Distance += max(Cloud.MinStepSize, Sample.SDist()); // Move along the ray to the next location.
            continue;
        }
        const float StepSize = CalcStepSize(Distance);
        Distance += StepSize;
        
        // Calculate the total density along our step.
        const float StepDensity = Sample.Density() * StepSize;
        
        // Integrate the absorption along the ray.
        Absorption += StepDensity * (1.0 - Absorption);
        
        // Integrate density along the ray.
        PathDensity += (Sample.Density() / Cloud.Density) * StepSize; // StepDensity;
        
        // Integrate direct out-scattering from the sun. 
        Luminance += TraceAbsorption(SamplePos, Cloud.SunDir, PathDensityThreshold) * Scattering * StepDensity * (1.0 - Absorption);
    }
    
    // Beer's Law <https://en.wikipedia.org/wiki/Beer%E2%80%93Lambert_law>
    const float3 PathAbsorption = saturate(exp(-Cloud.Absorption * PathDensity * Cloud.Density));
    
    // Finally, combine the view color with the luminance based on the absorption.
    return ViewColor * PathAbsorption + Luminance;
}

// Compute Shader code
[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID) {
    // Calculate the pixel coordinate of this thread.
    const uint2 Pixel = View.ViewRectMinAndSize.xy + DispatchThreadId;
    
	// Make sure this pixel isn't outside the viewport bounds.
    if (any(Pixel >= View.ViewRectMinAndSize.zw)) return;
	
    // Calculate the UV coordinate of the current pixel.
    const float2 UV = GetPixelUV(Pixel);
    
    // Get the ray origin & direction.
    const float3 RayOrigin = GetRayOrigin();
    const float3 RayDirection = GetRayDirection(UV);
    
    // Ray vs Sphere intersection test.
    const float3 FinalColor = TraceVolume(SceneColor[Pixel], RayOrigin, RayDirection);
    Output[Pixel] = float4(FinalColor, 1.0);
}
