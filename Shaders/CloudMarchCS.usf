#include "Common.ush"
#include "Cloud.ush"

// Ray Marching Parameters
static const uint MAX_DIRECT_STEPS = 256;
static const uint MAX_INDIRECT_STEPS = 256;

// Cloud Parameters
ConstantBuffer<CloudInstance> Cloud;

// Scene Textures
Texture2D<float3> SceneColor;
Texture2D<float> SceneDepth;

// Density Cache Texture
Texture3D<float> DensityCacheDataSRV;

// Output Texture
RWTexture2D<float4> Output;

#if DEBUG
static int STEP_COUNT = 0;
#endif

/// Calculate a distance-based step size for ray-marching.
float CalcStepSize(const float Distance) {
    // return Cloud.PrimaryNearStep + Distance * Cloud.PrimaryStepPerDistance;
    return max(Cloud.PrimaryNearStep, sqrt(Distance) * Cloud.PrimaryStepPerDistance);
}

CloudSample SampleVolume(const float3 Point) {
    return SampleCloud(Cloud, Point);
}

/// Anisotropic scattering function for clouds.
/// Source: <https://www.guerrilla-games.com/read/nubis-cubed>
float HenyeyGreenstein(float VdotL, float G) {
    const float G2 = G * G;
    const float num = 1.0 - G2;
    const float denom = 1.0 + G2 - 2.0 * G * VdotL;
    const float rsqrt_denom = rsqrt(denom);
    return num * rsqrt_denom * rsqrt_denom * rsqrt_denom * 0.07957747154594766788444188168626;
}

/// Trace the scene, find out how much light is being absorped.
float3 TraceAbsorption(const float3 Origin, const float3 Dir, const float SunDot) {
    // Sample the cache.
    const float3 UVW = (Origin - Cloud.Position) / HALF_VOLUME_SIZE * 0.5 + 0.5;
    const float CacheData = DensityCacheDataSRV.Sample(GlobalBilinearClampedSampler, UVW);
    const float PathDensity = Remap(CacheData, 0.0, 1.0, 0.0, 32.0);
    if (PathDensity == 32.0) return float3(0.0, 0.0, 0.0);
    
    // Beer's Law <https://en.wikipedia.org/wiki/Beer%E2%80%93Lambert_law>
    const float InvAbsorption = -Cloud.Absorption * PathDensity;
    
    // Multi-scatter approximation.
    if (Cloud.MultiScattering) {
        const RoughSample Sample = SampleCloudRough(Cloud, Origin);
        const float InnerGlow = Remap(Sample.SDist, -12800.0, 0.0, 0.05, 0.25);
        const float AnisotropicScattering = Remap(SunDot, 0.0, 0.9, 0.25, InnerGlow);
        return exp(InvAbsorption) + exp(InvAbsorption * AnisotropicScattering);
    }
   
    return exp(InvAbsorption);
}

float3 TraceVolume(const float3 ViewColor, const float3 Origin, const float3 Dir) {
    // Intersect the bounds of the volume, return early if we miss.
    const float2 BoundsIntersection = RayAABB(Origin, Dir, Cloud.Position - HALF_VOLUME_SIZE, Cloud.Position + HALF_VOLUME_SIZE);
    if (BoundsIntersection.x > BoundsIntersection.y) return ViewColor;
    
    // Traversal variables.
    float Absorption = 0.0;
    float3 Luminance = 0.0;
    float PathDensity = 0.0;
    float Distance = max(0.0, BoundsIntersection.x);
    
    // Sun out-scattering will be identical everywhere along the ray, so we pre-calculate it.
    const float SunDot = dot(Dir, Cloud.SunDir);
    const float3 Scattering = Cloud.SunLuminance * HenyeyGreenstein(SunDot, 0.2);
    
    // Integrate luminance along the ray.
    for (uint s = 0; s < MAX_DIRECT_STEPS; ++s) {
        if (Distance >= BoundsIntersection.y) break;
        
#if DEBUG
        STEP_COUNT++;
#endif
        
        // Sample the volume at the current location.
        const float3 SamplePos = Origin + Dir * Distance;
        const CloudSample Sample = SampleVolume(SamplePos);
        
        // No work to be done outside the volume, just keep stepping.
        if (Sample.IsOutside()) {
            Distance += max(Cloud.PrimaryMinSDFStep, Sample.SDist()); // Move along the ray to the next location.
            continue;
        }
        const float StepSize = CalcStepSize(Distance);
        Distance += StepSize;
        
        // Calculate the total density along our step.
        const float StepDensity = Sample.Density() * StepSize;
        
        // Integrate the absorption along the ray.
        Absorption = saturate(Absorption + StepDensity * (1.0 - Absorption));
        if (Absorption > 0.999) {
            Absorption = 1.0;
            break;
        }
        
        // Integrate density along the ray.
        PathDensity += StepDensity;
        
        // Integrate direct out-scattering from the sun. 
        if (Cloud.DirectScattering) {
            Luminance += TraceAbsorption(SamplePos, Cloud.SunDir, SunDot) * Scattering * StepDensity * (1.0 - Absorption);
        }
        
        // Integrate ambient out-scattering.
        if (Cloud.AmbientScattering) {
            const RoughSample Sample = SampleCloudRough(Cloud, Origin);
            const float DimensionalProfile = min(1.0, -Sample.SDist / UNITS_PER_VOXEL * 0.2);
            Luminance += StepDensity * pow(1.0 - DimensionalProfile, 0.5) * Cloud.AmbientFlux;
        }
    }
    
    // Beer's Law <https://en.wikipedia.org/wiki/Beer%E2%80%93Lambert_law>
    // const float3 PathAbsorption = exp(-Cloud.Absorption * PathDensity);
    
    // Finally, combine the view color with the luminance based on the absorption.
    return ViewColor * (1.0 - Absorption) + Luminance;
}

// Compute Shader code
[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void MainCS(uint2 DispatchThreadId : SV_DispatchThreadID) {
    // Calculate the pixel coordinate of this thread.
    const uint2 Pixel = View.ViewRectMinAndSize.xy + DispatchThreadId;
    
	// Make sure this pixel isn't outside the viewport bounds.
    if (any(Pixel >= View.ViewRectMinAndSize.zw)) return;
	
    // Calculate the UV coordinate of the current pixel.
    const float2 UV = GetPixelUV(Pixel);
    
    // Get the ray origin & direction.
    const float3 RayOrigin = GetRayOrigin();
    const float3 RayDirection = GetRayDirection(UV);
    
    // Ray vs Sphere intersection test.
    const float3 FinalColor = TraceVolume(SceneColor[Pixel], RayOrigin, RayDirection);
    
#if DEBUG
    Output[Pixel] = float4((float)STEP_COUNT / (float)MAX_DIRECT_STEPS, 0.0, 0.0, 1.0);
#else
    Output[Pixel] = float4(FinalColor, 1.0);
#endif
}
