#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"

/// Remap an input value in an input range to an output range.
float Remap(const float Value, const float InMin, const float InMax, const float OutMin, const float OutMax) {
    const float Range = InMax - InMin;
    const float Norm = (Value - InMin) / Range;
    const float Clamped = (Norm < 0.0) ? 0.0 : (Norm > 1.0) ? 1.0 : Norm;
    return OutMin + (Clamped * (OutMax - OutMin));
}

/// Get the entry distance of a ray with an AABB.
float2 RayAABB(const float3 RayOrigin, const float3 RayDir, const float3 BoxMin, const float3 BoxMax) {
    float3 T0 = (BoxMin - RayOrigin) / RayDir;
    float3 T1 = (BoxMax - RayOrigin) / RayDir;
    
    const float3 Temp = T0;
    T0 = min(Temp, T1), T1 = max(Temp, T1);
 
    const float TMin = max(max(max(T0.x, T0.y), T0.z), 0.0);
    const float TMax = min(min(T1.x, T1.y), T1.z);
    return float2(TMin, TMax);
};

/// Get the UV coordinate for a given pixel.
float2 GetPixelUV(const uint2 Pixel) { return (float2(Pixel) + 0.5 - View.TemporalAAJitter.xy) * View.ViewSizeAndInvSize.zw; }

/// Get the depth value for a given pixel along the given ray.
float TransformPixelDepth(const float DeviceZ, const float3 RayDirection) { return ConvertFromDeviceZ(DeviceZ) / dot(RayDirection, View.ViewForward); }

/// Get the ray origin of the current view.
float3 GetRayOrigin() { return View.WorldViewOriginHigh + View.WorldViewOriginLow; }

/// Get the ray direction of the current view for a given UV coordinate.
float3 GetRayDirection(const float2 UV) {
    // Reconstruct view space position on the far plane
    float2 NDC = (UV - 0.5) * 2.0;
    NDC.y = -NDC.y;
    
    // Unproject from clip space to view space
    const float4 ClipPos = float4(NDC, 1.0f, 1.0f);
    float4 ViewPos = mul(ClipPos, View.ClipToView);
    ViewPos.xyz /= ViewPos.w;
    
    // Transform view space direction to world space
    return normalize(mul(float4(ViewPos.xyz, 0.0f), View.ViewToTranslatedWorld).xyz);
}
