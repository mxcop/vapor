#include "/Engine/Public/Platform.ush"
#include "/Engine/Private/Common.ush"

/// Get the UV coordinate for a given pixel.
float2 GetPixelUV(const uint2 Pixel) { return (float2(Pixel) + 0.5 - View.TemporalAAJitter.xy) * View.ViewSizeAndInvSize.zw; }

/// Get the depth value for a given pixel along the given ray.
float TransformPixelDepth(const float DeviceZ, const float3 RayDirection) { return ConvertFromDeviceZ(DeviceZ) / dot(RayDirection, View.ViewForward); }

/// Get the ray origin of the current view.
float3 GetRayOrigin() { return View.WorldViewOriginHigh + View.WorldViewOriginLow; }

/// Get the ray direction of the current view for a given UV coordinate.
float3 GetRayDirection(const float2 UV) {
    // Reconstruct view space position on the far plane
    float2 NDC = (UV - 0.5) * 2.0;
    NDC.y = -NDC.y;
    
    // Unproject from clip space to view space
    const float4 ClipPos = float4(NDC, 1.0f, 1.0f);
    float4 ViewPos = mul(ClipPos, View.ClipToView);
    ViewPos.xyz /= ViewPos.w;
    
    // Transform view space direction to world space
    return normalize(mul(float4(ViewPos.xyz, 0.0f), View.ViewToTranslatedWorld).xyz);
}